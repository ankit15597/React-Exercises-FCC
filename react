Q1.The current code uses JSX to assign a div element to the constant JSX.
Replace the div with an h1 element and add the text Hello JSX! inside it.

Soln:
const JSX = <h1>Hello JSX!</h1>;

Q2.Define a new constant JSX that renders a div which contains the following elements in order:
An h1, a p, and an unordered list that contains three li items. You can include any text you want within each element.

Soln:
const JSX = 
<div>
  <h1>Sample Heading</h1>
  <p> Sample Paragraph</p>
  <ul>
    <li>li 1 </li>
    <li>li 2</li>
    <li>li 3</li>
  </ul>
</div>;


Q3.To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.
The code editor has a JSX element similar to what you created in the last challenge. 
Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.

Soln:
const JSX = (
  <div>
    <h1>This is a block of JSX</h1>
    <p>Here's a subtitle</p>
    {/* Comment */}
  </div>
);

Q4.ReactDOM offers a simple method to render React elements to the DOM which looks like this: 
ReactDOM.render(componentToRender, targetNode), where the first argument is the React element or component that you want 
to render, and the second argument is the DOM node that you want to render the component to.
As you would expect, ReactDOM.render() must be called after the JSX element declarations, just like how you must declare
variables before using them.
The code editor has a simple JSX component. Use the ReactDOM.render() method to render this component to the page. 
You can pass defined JSX elements directly in as the first argument and use document.getElementById() to select the DOM node
to render them to. There is a div with id='challenge-node' available for you to use. Make sure you don't change the JSX constant.

Soln:
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// change code below this line

ReactDOM.render(JSX, document.getElementById("challenge-node"));

Q5.One key difference in JSX is that you can no longer use the word class to define HTML classes. 
This is because class is a reserved word in JavaScript. Instead, JSX uses className.
In fact, the naming convention for all HTML attributes and event references in JSX become camelCase.
For example, a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. 
While this is a subtle difference, it is an important one to keep in mind moving forward.
Apply a class of myDiv to the div provided in the JSX code.

Soln:
const JSX = (
  <div className = "myDiv">
    <h1>Add a class to this div</h1>
  </div>
);

Q6.In HTML, almost all tags have both an opening and closing tag: <div></div>; the closing tag always has a forward slash
before the tag name that you are closing. However, there are special instances in HTML called “self-closing tags”,
or tags that don’t require both an opening and closing tag before another tag can start.

For example the line-break tag can be written as <br> or as <br />, but should never be written as <br></br>,
since it doesn't contain any content.

In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.
The line-break tag, for example, must always be written as <br /> in order to be valid JSX that can be transpiled. A <div>, 
on the other hand, can be written as <div /> or <div></div>. The difference is that in the first syntax version there is no way 
to include anything in the <div />. You will see in later challenges that this syntax is useful when rendering React components

Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the 
content - you only need to close tags where they are needed.

Soln:
const JSX = (
  <div>
    
    <h2>Welcome to React!</h2> <br/>
    <p>Be sure to close all tags!</p>
    <hr/>
    
  </div>
);

Q7. The code editor has a function called MyComponent. Complete this function so it returns a single div element which 
contains some string of text.
Code:
const MyComponent = function() {
  // change code below this line

  

  // change code above this line
}

Soln:
const MyComponent = function() {
  // change code below this line

  return (<div> Some string </div>);

  // change code above this line
}

Q8.The render method so it returns a div element that contains an h1 with the text Hello React!.
Soln:
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // change code below this line
    return <div><h1>Hello React!</h1></div>


    // change code above this line
  }
};

Q9.Rendering the ChildComponent within the ParentComponent.

Soln:
const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* change code below this line */ }
        <ChildComponent/>


        { /* change code above this line */ }
      </div>
    );
  }
};

Q10.There are two functional components defined in the code editor, called TypesOfFruit and Fruits.
Take the TypesOfFruit component and compose it, or nest it, within the Fruits component.
Then take the Fruits component and nest it within the TypesOfFood component.
The result should be a child component, nested within a parent component, which is nested within a parent component
of its own!

Soln:
const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* change code below this line */ }
    
      <TypesOfFruit/>
      { /* change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* change code below this line */ }
        <Fruits/>
        { /* change code above this line */ }
      </div>
    );
  }
};

Q11. Nest two components inside of Fruits — first NonCitrus, and then Citrus. 
Both of these components are provided for you behind the scenes. Next, nest the Fruits class component 
into the TypesOfFood component, below the h1 header and above Vegetables. The result should be a series of nested components, 
which uses two different component types.

Soln: 
class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* change code below this line */ }
        <NonCitrus/>
        <Citrus/>

        { /* change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* change code below this line */ }
        <Fruits/>

        { /* change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};

Q12.Both the Fruits and Vegetables components are defined for you behind the scenes. 
Render both components as children of the TypesOfFood component, then render TypesOfFood to the DOM.
There is a div with id='challenge-node' available for you to use.

Soln:
class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* change code below this line */}
        <Fruits/>
        <Vegetables/>
        {/* change code above this line */}
      </div>
    );
  }
};

// change code below this line
ReactDOM.render(<TypesOfFood/>, document.getElementById('challenge-node'))

Output:
Types of Food:
Fruits:
Non-Citrus:
Apples
Blueberries
Strawberries
Bananas
Citrus:
Lemon
Lime
Orange
Grapefruit
Vegetables:
Brussel Sprouts
Broccoli
Squash































































